<?php

/**
 * @file
 * Display a Google Custom Search Engine (CSE) on your site.
 */

/**
 * Implements hook_search_info().
 */
function relevant_gcse_search_info() {
  return array(
    'title' => relevant_gcse_results_tab(),
    'path' => 'google',
    'conditions_callback' => 'relevant_gcse_conditions_callback',
  );
}

/**
 * Search conditions callback.
 */
function relevant_gcse_conditions_callback($keys) {
  $conditions = array();
  return $conditions;
}

/**
 * Implements hook_search_execute().
 */
function relevant_gcse_search_execute($keys = NULL, $conditions = NULL) {
  if ($keys && !isset($_GET['query'])) {
    drupal_goto('search/google/'. $keys, array('query' => relevant_gcse_build_query($keys)), 301);
  }
  elseif (variable_get('relevant_gcse_use_adv', 0)) {
    // Firstly, load the needed modules.
    module_load_include('inc', 'relevant_gcse', 'relevant_gcse_adv/relevant_gcse_adv');
    // And get the google results.
    $response = relevant_gcse_adv_service($keys);
    $results = relevant_gcse_adv_response_results($response[0], $keys, $conditions);

    return $results;
  }

}

/**
 * Builds a query array based on Google CSE settings.
 */
function relevant_gcse_build_query($keys, $sitesearch = NULL, $here = TRUE) {
  return array(
    'query' => $keys,
    'cx' => variable_get('relevant_gcse_cx', ''),
    'cof' => $here ? variable_get('relevant_gcse_cof_here', 'FORID:11') : variable_get('relevant_gcse_cof_google', 'FORID:0'),
    'sitesearch' => isset($sitesearch) ? $sitesearch : relevant_gcse_sitesearch_default(),
  ) + relevant_gcse_advanced_settings();
}

/**
 * Implements hook_search_page().
 */
function relevant_gcse_search_page($results) {
  $output['prefix']['#markup'] = '<ol class="search-results">';

  if(!variable_get('relevant_gcse_use_adv', 0)) {
    $output['#theme'] = 'relevant_gcse_results';

    return $output;
  }else {
    if ($results) {
      foreach ($results as $entry) {
        $output[] = array(
          '#theme' => 'search_result',
          '#result' => $entry,
          '#module' => 'relevant_gcse',
        );
      }
      // Important, add the pager.
      $output['suffix']['#markup'] = '</ol>' . theme('pager');
    }
    else {
      // No results found.
      $output['search_results'] = array('#markup' => theme('relevant_gcse_search_noresults'));
    }

  }

  return $output;
}

/**
 * Implements hook_search_admin().
 */
function relevant_gcse_search_admin() {
  module_load_include('admin.inc', 'relevant_gcse');
  return relevant_gcse_admin_settings();
}

/**
 * Implements hook_search_access().
 */
function relevant_gcse_search_access() {
  return user_access('search Google CSE');
}

/**
 * Implements hook_theme().
 */
function relevant_gcse_theme($existing, $type, $theme, $path) {
  return array(
    'relevant_gcse_results' => array(
      'variables' => array('form' => FALSE, 'path' => $path),
      'file' => 'relevant_gcse.theme.inc',
      'template' => 'relevant_gcse_results',
    ),
    'relevant_gcse_results_gadget' => array(
      'variables' => array(),
      'file' => 'relevant_gcse.theme.inc',
      'template' => 'relevant_gcse_results_gadget',
    ),
    'relevant_gcse_adv_results' => array(
      'variables' => array('form' => FALSE, 'path' => $path),
      'file' => 'relevant_gcse.theme.inc',
      'template' => 'relevant_gcse_adv/templates/relevant_gcse_adv_results',
    ),
    /**
     * Shows a message when the search does not return any result
     */
    'relevant_gcse_search_noresults' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_block().
 */
function relevant_gcse_block_info() {
  return array(
    'relevant_gcse' => array(
      'info' => t('Google CSE'),
    ),
  );
}

function relevant_gcse_block_view($delta = '') {
  if (user_access('search Google CSE')) {
    switch ($delta) {
      case 'relevant_gcse':
        return array(
          'subject' => t('Search'),
          'content' => array('#theme' => 'relevant_gcse_results', '#form' => TRUE),
        );
    }
  }
}

/**
 * Return the Google CSE tab title, either a setting or a translation.
 */
function relevant_gcse_results_tab() {
  return ($var = variable_get('relevant_gcse_results_tab', '')) ? $var : t('Google');
}

/**
 * Implements hook_perm().
 */
function relevant_gcse_permission() {
  return array(
    'search Google CSE' => array(
      'title' => t('Use Google CSE'),
    ),
  );
}

/**
 * Returns an array of any advanced settings which have been set.
 */
function relevant_gcse_advanced_settings() {
  global $language;
  $settings = array();
  foreach (array('cr', 'gl', 'hl', 'ie', 'lr', 'oe', 'safe') as $parameter) {
    if ($setting = variable_get("relevant_gcse_$parameter", '')) {
      $settings[$parameter] = $setting;
    }
  }
  if (variable_get('relevant_gcse_locale_hl', '')) {
    $settings['hl'] = $language->language;
  }
  if (variable_get('relevant_gcse_locale_lr', '')) {
    $settings['lr'] = 'lang_'. $language->language;
  }
  return $settings;
}

function relevant_gcse_language() {
  global $language;
  return variable_get('relevant_gcse_locale_hl', '') ? $language->language : variable_get('relevant_gcse_hl', '');
}

/**
 * Implements hook_init().
 */
function relevant_gcse_init() {
  drupal_add_js(array('googleCSE' => array(
    'cx' => variable_get('relevant_gcse_cx', ''),
    'language' => relevant_gcse_language(),
    'resultsWidth' => intval(variable_get('relevant_gcse_results_width', 600)),
    'domain' => variable_get('relevant_gcse_domain', 'www.google.com'),
  )), 'setting');
}

/**
 * Returns SiteSearch options form item.
 */
function relevant_gcse_sitesearch_form(&$form) {
  if ($options = relevant_gcse_sitesearch_options()) {
    $form['sitesearch'] = array(
      '#type' => variable_get('relevant_gcse_sitesearch_form', 'radios'),
      '#options' => $options,
      '#default_value' => relevant_gcse_sitesearch_default(),
    );
    if ($type == 'select' && isset($form['sa'])) {
      $form['sa']['#weight'] = 10;
    }
  }
}

/**
 * Returns SiteSearch options.
 */
function relevant_gcse_sitesearch_options() {
  static $options;
  if (!isset($options)) {
    $options = array();
    if ($sites = preg_split('/[\n\r]+/', variable_get('relevant_gcse_sitesearch', ''), -1, PREG_SPLIT_NO_EMPTY)) {
      $options[''] = ($var = variable_get('relevant_gcse_sitesearch_option', '')) ? $var : t('Search the web');
      foreach ($sites as $site) {
        $site = preg_split('/[\s]+/', trim($site), 2, PREG_SPLIT_NO_EMPTY);
          // Select options will be HTML-escaped and radio options will be XSS-filtered.
        $options[$site[0]] = isset($site[1]) ? $site[1] : t('Search %sitesearch', array('%sitesearch' => $site[0]));
      }
    }
  }
  return $options;
}

/**
 * Returns SiteSearch default value.
 */
function relevant_gcse_sitesearch_default() {
  $options = relevant_gcse_sitesearch_options();
  if (isset($_GET['sitesearch']) && isset($options[$_GET['sitesearch']])) {
    return $_GET['sitesearch'];
  }
  elseif (variable_get('relevant_gcse_sitesearch_default', 0)) {
    // Return the key of the second element in the array.
    return key(array_slice($options, 1, 1));
  }
  return '';
}

/**
 * Adds custom submit handler for search form.
 */
function relevant_gcse_form_search_form_alter(&$form, &$form_state, $form_id) {
  if ($form['module']['#value'] == 'relevant_gcse') {
    if (variable_get('relevant_gcse_results_gadget', 1)) {
      $form['basic']['op']['#suffix'] = theme('relevant_gcse_results_gadget');
    }
    relevant_gcse_sitesearch_form($form);
    $form['#submit'][] = 'relevant_gcse_search_form_submit';
    $form['#attributes']['class'][] = 'google-cse';
  }
}

/**
 * Processes a search form submission.
 */
function relevant_gcse_search_form_submit($form, &$form_state) {
  $keys = $form_state['values']['processed_keys'];
  $sitesearch = isset($form_state['values']['sitesearch']) ? $form_state['values']['sitesearch'] : NULL;
  $form_state['redirect'] = array($form_state['redirect'], array('query' => relevant_gcse_build_query($keys, $sitesearch)), 301);
}

/**
 * Adds custom submit handler for search block form.
 */
function relevant_gcse_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $info = search_get_default_module_info();
  if ($info['module'] == 'relevant_gcse') {
    relevant_gcse_sitesearch_form($form);
    $form['#submit'][] = 'relevant_gcse_search_block_form_submit';
    $form['#attributes']['class'][] = 'google-cse';
  }
}

/**
 * Processes a search block form submission.
 */
function relevant_gcse_search_block_form_submit($form, &$form_state) {
  $keys = trim($form_state['values'][$form['form_id']['#value']]);
  $sitesearch = isset($form_state['values']['sitesearch']) ? $form_state['values']['sitesearch'] : NULL;
  $form_state['redirect'] = array($form_state['redirect'], array('query' => relevant_gcse_build_query($keys, $sitesearch)), 301);
}


/*
 * Implements hook_proxy_settings_info()
 */
function relevant_gcse_proxy_settings_info() {
  return array('relevant_gcse_adv' =>
    array(
      'name' => 'Google Custom Search Engine',
    )
  );
}


/**
 * Brief message to display when no results match the query.
 *
 * @see search_help()
 */
function theme_relevant_gcse_search_noresults() {
  return t('<h2>Sorry there were no results matching your enquiry.</h2>
    <ul>
    <li>Check the spelling of your keywords</li>
    <li>Try a more specific enquiry (e.g. <em>"Penny Black"</em> instead of <em>"Stamps"</em>): "blue drop"</em></li>
    <li>Be explicit (e.g. <em>"Second class stamp"</em> instead of <em>"Stamp"</em>)</li>
    <li>Include spaces between keywords</li>
    </ul>');
}
